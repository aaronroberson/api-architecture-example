{
  "name": "mongoose-scrud",
  "version": "0.1.2",
  "description": "Convenience wrapper for performing SCRUD operations using the Mongoose ODM",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aaronroberson/mongoose-scrud.git"
  },
  "keywords": [
    "mongoose",
    "scrud",
    "rest",
    "api"
  ],
  "author": {
    "name": "Aaron Roberson",
    "url": "aaronaroberson@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/aaronroberson/mongoose-scrud/issues"
  },
  "homepage": "https://github.com/aaronroberson/mongoose-scrud#readme",
  "dependencies": {
    "lodash": "^3.10.1",
    "mongoose": "^4.1.1"
  },
  "readme": "# Mongoose SCRUD\n\nNode.js Express middleware that uses your Mongoose schema to generate SCRUD API routes compatible with AngularJS and ngResource.\n\n## Implementation\n\nBefore you begin, be sure [MongoDB is installed](http://docs.mongodb.org/manual/installation/) and `mongod` is running.\n\nInstall mongoose-scrud as a dependency and add it to your `package.json` file.\n\n```\nnpm install mongoose-scrud --save\n```\n\nFirst, define your Mongoose models and any necessary validations and indexes.\n\n```\n// models.js\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar userSchema = new Schema({\n\tname: { type: String, required: true },\n\temail: { type: String, required: true },\n\tpassword: { type: String, required: true }\n});\nmongoose.model('User', userSchema);\n\nvar postSchema = new Schema({\n\ttitle: { type: String, required: true },\n\tcontents: { type: String, required: true },\n\tauthor: { type: Schema.Types.ObjectId, ref: 'User', index: true }\n});\nmongoose.model('Post', postSchema);\n```\n\n## Options\n\nMongoose SCRUD expects the Model object and options to be passed in on require of the module as seen below:\n\n```\nvar scrud = require('mongoose-scrud')(Model, {\n\trelate: true\n});\n```\n\n### relate\nExperimental feature that automatically populates references on create and removes them on delete. Default: `false`\n\n## Usage\n\nFor each model, five endpoints are created that handle resource search, create, read, update and delete (SCRUD) functions.\n\n### Search\n```\nfunction(req, res, next) {\n\tscud.search(req.query, function(error, results) {\n\t  error ? response.json(500, {code: 'MongoError', message: error}) : response.json(200, results);\n\t});\n}\n```\nThe search route returns an array of resources that match the fields and values provided in the query parameters.\n\nFor example:\n\n```\nGET /api/posts?author=544bbbceecd047be03d0e0f7&__limit=1\n```\nIf no query parameters are present, it returns the entire data set.  No results will be an empty array (`[]`).\n\nOptions are passed in as query parameters in the format of `&__{option}={value}` in the query string, and unlock the power of MongoDB's `find()` API.\n\nOption   | Description\n-------- | -------------\nlimit    | Limits the result set count to the supplied value.\nskip     | Number of records to skip (offset).\nsort     | Sorts the record according to provided [shorthand sort syntax](http://mongoosejs.com/docs/api.html#query_Query-sort) (e.g. `&__sort=-name`).\npopulate | Populates object references with the full resource (e.g. `&__populate=users`).\ncount    | When present, returns the resulting count in an array (e.g. `[38]`).\nnear     | Performs a geospatial query on given coordinates and an optional range (in meters), sorted by distance by default. Required format: `{longitude},{latitude},{range}`\n\nMongoose SCRUD also supports range queries. To perform a range query, pass in a stringified JSON object into the field on the request.\n\n```\nGET /api/posts?createdAt={\"$gt\":\"2013-01-01T00:00:00.000Z\"}\n```\n\nUsing `ngResource` in AngularJS, performing a range query is easy:\n\n```\n// Find posts created on or after 1/1/2013.\nPosts.query({\n\tcreatedAt: JSON.stringify({\n\t\t$gte: new Date('2013-01-01')\n\t})\n});\n```\n\n### Create\n```\nfunction(req, res, next) {\n\tscud.create(req.body, function(error, results) {\n\t  error ? response.json(500, {code: 'MongoError', message: error}) : response.json(200, results);\n\t});\n}\n```\nPosting (or putting, if enabled) to the create route validates the incoming data and creates a new resource in the collection. Upon validation failure, a `400` error with details will be returned to the client. On success, a status code of `201` will be issued and the new resource will be returned.\n\n### Read\n```\nfunction(req, res, next) {\n\tscud.read(id, req.query, function(error, results) {\n\t  error ? response.json(500, {code: 'MongoError', message: error}) : response.json(200, results);\n\t});\n}\n```\nThe read path returns a single resource object in the collection that matches a given id. If the resource does not exist, a `404` is returned.\n\n### Update\n```\nfunction(req, res, next) {\n\tscud.update(id, req.body, function(error, results) {\n\t  error ? response.json(500, {code: 'MongoError', message: error}) : response.json(200, results);\n\t});\n}\n```\nPosting (or putting, if enabled) to the update route will validate the incoming data and update the existing resource in the collection and respond with `204` if successful. Upon validation failure, a `400` error with details will be returned to the client. A `404` will be returned if the resource did not exist.\n\n### Delete\n```\nfunction(req, res, next) {\n\tscud.del(id, function(error, results) {\n\t  error ? response.json(500, {code: 'MongoError', message: error}) : response.json(200, results);\n\t});\n}\n```\nIssuing a delete request to this route will result in the deletion of the resource and a `204` response if successful. If there was no resource, a `404` will be returned.\n\n## Sub-documents\n```\nfunction index(request, response) {\n  request.query = request.query || {};\n\n  // Support for nested resources such as\n  // GET /portal/accounts/:id/transactions\n  if (request.params.id || request.accountId) {\n    request.query.account = request.params.id || request.accountId;\n  }\n\n  // Default sort to descending order on createdAt\n  request.query.__sort = request.query.__sort || '-createdAt';\n\n  scrud.search(request.query, function(error, results) {\n    error ? response.json(500, {code: 'MongoError', message: error}) : response.json(200, results);\n  });\n}\n```\n\n\n## Validation Hooks\n\nMongoose SCRUD will handle [validation described by your models](http://mongoosejs.com/docs/validation.html), as well as any [error handling defined](http://mongoosejs.com/docs/middleware.html) in your `pre` middleware hooks.\n\n```\npostSchema.path('type').validate(function (value) {\n  return /article|review/i.test(value);\n}, 'InvalidType');\n\n```\n\nThe above custom validator example will return a validation error if a value other than \"article\" or \"review\" exists in the `type` field upon creation or update.\n\nExample response:\n\n```\n{\n\tmessage: 'Validation failed',\n\tname: 'ValidationError',\n\terrors: {\n\t\ttype:\n\t\t\t{\n\t\t\t\tmessage: 'InvalidType',\n\t\t\t\tname: 'ValidatorError',\n\t\t\t\tpath: 'type',\n\t\t\t\ttype: 'user defined',\n\t\t\t\tvalue: 'poop'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nAdvanced validation for the create and update routes may be achieved using the `pre` hook, for example:\n\n```\ncommentSchema.pre('save', function (next) {\n\tif (this.message.length <= 5) {\n\t\tvar error = new Error();\n\t\terror.name = 'ValidateLength'\n\t\terror.message = 'Comments must be longer than 5 characters.';\n\t\treturn next(error);\n\t}\n\tnext();\n});\n```\nMongoose SCRUD will return a `400` with the error object passed by your middleware.\n\n```\n{\n\tname: 'ValidateLength',\n\tmessage: 'Comments must be longer than 5 characters.'\n}\n```\n\n## Credits\n\nThis package is adapted from [meanify](https://github.com/artzstudio/meanify) and is made for use in non-express applications. As such, Express is not a dependency. Please note, this library does not generate endpoints.\n\n## Roadmap\n\n* Examples and documentation on integration.\n\n## Changelog\n\n### 0.1.0 | 10/28/2014\n* Alpha release ready for publish to npm and testing.",
  "readmeFilename": "README.md",
  "gitHead": "a41d87bd6cb4bb61440886308c4fadb24c71db0f",
  "_id": "mongoose-scrud@0.1.2",
  "_shasum": "bee1231a5298d7ed830a430336e868e0fdff56ce",
  "_from": "mongoose-scrud@*"
}
